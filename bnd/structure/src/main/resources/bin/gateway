#!/bin/sh

realpath() {
  READLINK_EXISTS=$(command -v readlink &> /dev/null)
  if [ -z $READLINK_EXISTS ]; then
    OURPWD=${PWD}
    cd "$(dirname "${1}")" || exit 2
    LINK=$(ls -l "$(basename "${1}")" | awk -F"-> " '{print $2}')
    while [ "${LINK}" ]; do
        echo "link: ${LINK}" >&2
        cd "$(dirname "${LINK}")" || exit 2
        LINK=$(ls -l "$(basename "${1}")" | awk -F"-> " '{print $2}')
    done
    REALPATH="${PWD}/$(basename "${1}")"
    cd "${OURPWD}" || exit 2
    echo "${REALPATH}"
  else
    OURPWD=${PWD}
    cd "$(dirname "${1}")" || exit 2
    LINK=$(readlink "$(basename "${1}")")
    while [ "${LINK}" ]; do
	    echo "link: ${LINK}" >&2
        cd "$(dirname "${LINK}")" || exit 2
        LINK=$(readlink "$(basename "${1}")")
    done
    REALPATH="${PWD}/$(basename "${1}")"
    cd "${OURPWD}" || exit 2
    echo "${REALPATH}"
  fi
}

REALNAME=$(realpath "$0")
DIRNAME=$(dirname "${REALNAME}")
PROGNAME=$(basename "${REALNAME}")
LOCAL_CLASSPATH=$CLASSPATH

#
# Load common functions
#
. "${DIRNAME}/inc"

#
# Sourcing environment settings for gateway similar to tomcats setenv
#
GATEWAY_SCRIPT="${PROGNAME}"
export GATEWAY_SCRIPT
if [ -f "${DIRNAME}/setenv" ]; then
  . "${DIRNAME}/setenv"
fi

forceNoRoot() {
    # If configured, prevent execution as root
    if [ "${GATEWAY_NOROOT}" ] && [ "$(id -u)" -eq 0 ]; then
        die "Do not run as root!"
    fi
}

setupClassPath() {
    # Add the jars in the lib dir
    for file in "${GATEWAY_HOME}"/lib/boot/*.jar
    do
        if [ -z "${CLASSPATH}" ]; then
            CLASSPATH="${file}"
        else
            CLASSPATH="${CLASSPATH}:${file}"
        fi
    done
}

init() {
    # Prevent root execution if configured
    forceNoRoot

    # Determine if there is special OS handling we must perform
    detectOS

    # Unlimit the number of file descriptors if possible
    unlimitFD

    # Locate the GATEWAY home directory
    locateHome

    # Locate the GATEWAY base directory
    locateBase

    # Locate the GATEWAY data directory
    locateData

    # Locate the GATEWAY etc directory
    locateEtc

    # Setup the native library path
    setupNativePath

    # Locate the Java VM to execute
    locateJava

    # Determine the JVM vendor
    detectJVM

    # Determine the JVM version >= 1.8
    checkJvmVersion

    # Setup default options
    setupDefaults

    # Setup classpath
    setupClassPath

    # Install debug options
    setupDebugOptions

}

run() {
    OPTS="-Dkaraf.startLocalConsole=true -Dkaraf.startRemoteShell=true"
    MAIN=aQute.launcher.pre.EmbeddedLauncher
    JAVA_ENDORSED_DIRS="${JAVA_HOME}/jre/lib/endorsed:${JAVA_HOME}/lib/endorsed:${GATEWAY_HOME}/lib/endorsed"
    JAVA_EXT_DIRS="${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext:${GATEWAY_HOME}/lib/ext"
    if ${cygwin}; then
        JAVA_HOME=$(cygpath --path --windows "${JAVA_HOME}")
        JAVA_ENDORSED_DIRS=$(cygpath --path --windows "${JAVA_ENDORSED_DIRS}")
        JAVA_EXT_DIRS=$(cygpath --path --windows "${JAVA_EXT_DIRS}")
    fi
    convertPaths
    cd "${GATEWAY_BASE}" || exit 2

    if [ -z "${GATEWAY_EXEC}" ]; then
        GATEWAY_EXEC=""
    fi

    debug=false
    debugs=false
    nodebug=false
    while [ "${1}" != "" ]; do
        case "${1}" in
            'clean')
                rm -rf "${GATEWAY_DATA:?}"
                shift
                ;;
            'debug')
                debug=true
                shift
                ;;
            'debugs')
                debug=true
                debugs=true
                shift
                ;;
            'server')
                OPTS="-Dkaraf.startLocalConsole=false -Dkaraf.startRemoteShell=true"
                shift
                ;;
            'daemon')
                OPTS="-Dkaraf.startLocalConsole=false -Dkaraf.startRemoteShell=true"
                GATEWAY_DAEMON="true"
                GATEWAY_EXEC="exec"
                shift
                ;;
            'client')
                OPTS="-Dkaraf.startLocalConsole=true -Dkaraf.startRemoteShell=false"
                nodebug=true
                shift
                ;;
            'classpath')
                echo "Classpath: ${CLASSPATH}"
                shift
                ;;
            *)
                break
                ;;
        esac
    done

    if ${nodebug}; then
        debug=false
    fi
    if ${debug}; then
        if [ "x${JAVA_DEBUG_OPTS}" = "x" ]; then
            if ${debugs}; then
                JAVA_DEBUG_OPTS="${DEFAULT_JAVA_DEBUGS_OPTS}"
            else
                JAVA_DEBUG_OPTS="${DEFAULT_JAVA_DEBUG_OPTS}"
            fi
        fi
        JAVA_OPTS="${JAVA_DEBUG_OPTS} ${JAVA_OPTS}"
    fi

    while true; do
        # Ensure the log directory exists
        # We may need to have a place to redirect stdout/stderr
        if [ ! -d "${GATEWAY_DATA}/log" ]; then
            mkdir -p "${GATEWAY_DATA}/log"
        fi
        if [ ! -d "${GATEWAY_DATA}/tmp" ]; then
            mkdir -p "${GATEWAY_DATA}/tmp"
        fi

        if [ "${VERSION}" -eq "11" ]; then
            ${GATEWAY_EXEC} "${JAVA}" ${JAVA_OPTS} \
                --add-reads=java.xml=java.logging \
                --add-opens java.base/java.security=ALL-UNNAMED \
                --add-opens java.base/java.net=ALL-UNNAMED \
                --add-opens java.base/java.lang=ALL-UNNAMED \
                --add-opens java.base/java.util=ALL-UNNAMED \
                --add-opens java.naming/javax.naming.spi=ALL-UNNAMED \
                --add-opens java.rmi/sun.rmi.transport.tcp=ALL-UNNAMED \
                --add-exports=java.base/sun.net.www.protocol.http=ALL-UNNAMED \
                --add-exports=java.base/sun.net.www.protocol.https=ALL-UNNAMED \
                --add-exports=java.base/sun.net.www.protocol.jar=ALL-UNNAMED \
                --add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED \
                --add-exports=jdk.naming.rmi/com.sun.jndi.url.rmi=ALL-UNNAMED \
                -Dgateway.home="${GATEWAY_HOME}" \
                -Dgateway.base="${GATEWAY_BASE}" \
                -Dgateway.data="${GATEWAY_DATA}" \
                -Dgateway.etc="${GATEWAY_ETC}" \
                -Dlaunch.storage.dir="${GATEWAY_DATA}/cache" \
                -Djava.io.tmpdir="${GATEWAY_DATA}/tmp" \
                -Dfelix.fileinstall.dir="${GATEWAY_ETC}" \
                -Dlogback.configurationFile="file:${GATEWAY_ETC}/logback.xml" \
                -Djava.util.logging.config.file="${GATEWAY_ETC}/java.util.logging.properties" \
                ${GATEWAY_SYSTEM_OPTS} \
                ${GATEWAY_OPTS} \
                ${OPTS} \
                -classpath "${CLASSPATH}" \
                ${MAIN} "$@"
        elif [ "${VERSION}" -eq "8" ]; then
            ${GATEWAY_EXEC} "${JAVA}" ${JAVA_OPTS} \
                -Djava.endorsed.dirs="${JAVA_ENDORSED_DIRS}" \
                -Djava.ext.dirs="${JAVA_EXT_DIRS}" \
                -Dgateway.home="${GATEWAY_HOME}" \
                -Dgateway.base="${GATEWAY_BASE}" \
                -Dgateway.data="${GATEWAY_DATA}" \
                -Dgateway.etc="${GATEWAY_ETC}" \
                -Dlaunch.storage.dir="${GATEWAY_DATA}/cache" \
                -Djava.io.tmpdir="${GATEWAY_DATA}/tmp" \
                -Dfelix.fileinstall.dir="${GATEWAY_ETC}" \
                -Dlogback.configurationFile="file:${GATEWAY_ETC}/logback.xml" \
                -Djava.util.logging.config.file="${GATEWAY_ETC}/java.util.logging.properties" \
                ${GATEWAY_SYSTEM_OPTS} \
                ${GATEWAY_OPTS} \
                ${OPTS} \
                -classpath "${CLASSPATH}" \
                ${MAIN} "$@"
        else
            die "Java != 8 && Java != 11 is not supported"
        fi

        GATEWAY_RC=$?
        if [ ${GATEWAY_DAEMON} ] ; then
            exit ${GATEWAY_RC}
        else
            if [ "${GATEWAY_RC}" -eq 10 ]; then
               echo "Restarting JVM..."
            else
               exit ${GATEWAY_RC}
            fi
        fi
    done
}

nothing() {
   # nothing to do here
   a=a
}

main() {
    init
    trap 'nothing' TSTP
    run "$@"
}

main "$@"
